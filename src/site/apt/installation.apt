 ------
Installation and Setup
 ------
Gunnar Hillert
 ------
February 19, 2008


Requirements

 jRecruiter requires the following infrastructure:

*---------------+-------------------------------------------+
|   Java 6      |	{{http://java.sun.com/}}
*---------------+-------------------------------------------+
|   Tomcat 6    |	{{http://tomcat.apache.org/}}
*---------------+-------------------------------------------+
|  Postgres 8.x |	{{http://www.postgresql.org/download/}}
*---------------+-------------------------------------------+
|  Maven 2.x    |	{{http://maven.apache.org/}}
*---------------+-------------------------------------------+

1) Please create a user in postgres called jrecruiter
2) Create a database in Postgres called jrecruiter
3) Make User jrecruiter the owner of the database

The tables and the initial seed data is generated by maven using the hibernate
plugin and the dbunit plugin

Please run the following command to create the table structure:

'''mvn compile hibernate3:hbm2ddl'''

Afterwards the seed data needs to be populated:

'''mvn dbunit:operation'''

Obtaining and building the sources

 Currently no readily deployable WAR is available. Thus, presently you need to
 check out the source from CVS and build the project using Maven.

 Please make sure that Maven 2.x is correctly installed and that the CVS
 executable is in your path. You can the directly check out the source files
 from CVS using Maven. Execute the following command:

 mvn scm:checkout -DconnectionUrl=scm:cvs:pserver:anonymous@https://jrecruiter.svn.sourceforge.net/svnroot/jrecruiter/trunk

 ---- The Section below needs to be updated ----

 This will by default put the files to ./target/checkout/

 When you build the project Maven2 will automatically download all required dependencies for - However there is one exception.
 The dependencies for JavaMail are not freely available in the repository and due to legal issues they can't be made available
 in the 'jREcruiter Maven repository' either. Therefore, you need to manually retrieve and install the mail.jar and activation.jar
 in your local Maven repository. They are infact used for compilation only and are not part of the resulting WAR file. (jRecruiter uses
 JNDI to get a mail session.).

 Please download the 2 jars from Sun. Go to http://java.sun.com/products/javamail/downloads/index.html in order to download 'javamail' and
 also go to http://java.sun.com/products/javabeans/glasgow/jaf.html in order to download 'activation'

 *mail.jar (version 1.3.3_01)
 *activation.jar (1.0.2)

 Use the following commands to install the JARs in your local Maven repository.

 mvn install:install-file -Dfile=mail.jar -DgroupId=javax.mail -DartifactId=mail -Dversion=1.3.3_01 -Dpackaging=jar
 mvn install:install-file -Dfile=activation.jar -DgroupId=javax.activation -DartifactId=activation -Dversion=1.0.2 -Dpackaging=jar

 Afterwards you are ready to build jRecruiter. Go to the ./target/checkout/ directory and build the war using the command:

 mvn package

Installation

 jRecruiter uses a Postgres data base as its persistence store.
 Before deployment you need to create a database and the required tables.
 The jRecruiter package contains a SQL script (jRecruiter.sql plus any update scripts)

 Also, once you have installed Tomcat 5.5 (or higher) and verified that it is in fact running,
 please set up a global JNDI datasource definition named jRecruiter as well as a global JNDI for sending mail mail. jRecruiter will
 use that datasource definition by default.

 []

 For example, in server.xml you have to make an entry similar the following:

----------------------------------------
 	...
   <GlobalNamingResources>
	...
	<Resource name="jdbc/postgres"
              scope="shareable"
              factory="org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory"
              auth="Container"
   		      driverClassName="org.postgresql.Driver"
   		      type="javax.sql.DataSource"
   		      maxActive="20"
   		      maxIdle="10"
   		      maxWait="10000"
		      validationQuery="select 1 from users"
		      removeAbandoned="true"
		      removeAbandonedTimeout="60"

   		      url="jdbc:postgresql://localhost/jrecruiter"
   		      username="user"
		      password="something"
		      />

    <Resource name="mail/session"
              auth="Container"
              type="javax.mail.Session"
              username="your_username"
              password="your_password"
              mail.smtp.host="smtp.your_host.com"
              mail.smtp.port="25"
	          mail.transport.protocol="smtp"
	          mail.smtp.auth="true"
              mail.smtp.user="your_username"
              mail.smtp.password="your_password"
		      />
	...
	</GlobalNamingResources>
	...
----------------------------------------

 []
